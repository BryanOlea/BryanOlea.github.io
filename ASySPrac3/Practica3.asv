%% Práctica 3: Señales en tiempo discreto
% Caudillo Barbosa Eric
%
% Olea García Bryan
%
% Robles Martínez Dario Antonio
%% Objetivos
% 
% * Manipulación básica de MATLAB
% * Gráficas de señales reales y complejas discretas
% * Transformación de señales discretas (escalamientos y traslaciones)
% * Calculo de energía y potencia de señales discretas
% 
%% INTRODUCCIÓN
% *Escalamiento horizontal de señales en tiempo discreto*
%%
% * *x2[n] = x1[an]*
%
% * Esta operación originará la aparición de nuevas muestras iguales a cero (a < 1) o la desaparición de algunas muestras (a > 1), debido a que la variable independiente "n" solo puede tomar valores enteros
% * Cuando se tiene la operación de escalamiento en tiempo acompañada de un desplazamiento, primero se debe escalar la señal y luego se debe desplazar. Estas operaciones tampoco son conmutativas entre sí.
%
% *Ejemplos:*
%
% *Si x(t) es una señal de audio en una grabadora de cinta, x( 2 t ) sería la misma grabación pero reproducida al doble de la velocidad) y x( ½ t ) reproducida a la mitad de la velocidad.
%
% *x2[n] = x1[ ½ n + 1]
n=-2:5;
x=[0 0 0 1 2 2 2 2 ];
stem(n,x,'filled')
title('x2[n]');
%%
figure
n1=-6:8;
x1=[0 0 0 0 0 0 1 0 2 0 2 0 2 0 2];
stem(n1,x1,'filled');
xlabel('n1')
xlabel('x1(n1)')
title('x1[ ½ n + 1]');
%% 1.-Crea una función que se llame fun1 y reciba dos parametros $\Omega$ y $a$ la función debe regresar la evaluación $f[n]=r^ncos[\Omega n]+ r^nsen(\Omega n)j$, esta función debe trabajar con $r\in R^+$, $\Omega\in R$ y $n\in  N^n$.
%   
%   function f= fun1( W,n,r )
%   f=(r.^n.*cos(W.*n))+(r.^n.*sin(W.*n).*i);
%   end
% 
%% 2.-Construya una función que gráfique funciones de $f:N\rightarrow R$ en el formato de su elección y pruebe su código mostrando la gráfica de $x[n]=na^nu[n]$ vs $n$ para $n\in {-2,...,10}$ para $a=0.9$
f=@(n,a) (n.*a.^n).*heaviside(n);
n=-2:10;
Gd2(n,f(n,0.9))
%% 3.-Construya una función que gráfique funciones de $f:N\rightarrow R^2$ en el formato de su elección y pruebe su código mostrando la gráfica de la función exponencial del primer problema, no debe incluir el código, solo el uso de la función para mostrarla gráfica. Reporte la gráfica de $f[n]$ para $r=1.1$, $\Omega=0.5$ y $n\in{-2,...,20}$ (recuerde que ya tiene una función para esto). Reporte la gráfica de $|f[n]|$ vs $n$ y $\angle f[n]$ vs $n$
n=-2:20;
f=fun1(0.5,n,1.1);
Gd3(n,real(f),imag(f))
subplot(1,2,1)
stem(n,abs(f))
subplot(1,2,2)
stem(n,angle(f))
%% 4.-Programe una función que calcule la energía de una señal en tiemp discreto la fucion se debe llamar energiadis. La función recibe dos paramétros de entrada: el vector de tiempo y las alturas asignadas. La función regresa la energia de la señal y despliega la gráfica de la señal.
%
%   function E=energiadis(t,h)
%   E=sum(h.*h,2);
%   Gd2(t,h)
%   end
%
%% 5.-Resuelva el problema 3.1.1 c) de Lathi
t=-3:3;
n=[-9 -6 -3 0 3 6 9];
E=energiadis(t,n)
%% 6.-Resuelve el problema 3.2.3 de Lathi
% *a) x[-n]*
%%
% *b) x[n+6]*
%%
% *c) x[n-6]*
%%
% *d) x[3n]*
%%
% *e) x[n/3]*

n=0:6;
x=[0 1 2 3 2 1 0];
Gd2(n,x)
title('x[n]');
%%
Gd2(-n,x)
title('x[-n]');
%%
Gd2(n-6,x)
title('x[n+6]');
%%
Gd2(n+6,x)
title('x[n-6]');
%%
x1=[0 3 0 0 0 0 0];
Gd2(n,x1)
title('x[3n]');
%%
Gd2(3*n,x)
title('x[n/3]');